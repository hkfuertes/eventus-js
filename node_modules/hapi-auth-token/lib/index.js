'use strict';

const Boom = require('boom');
const Hoek = require('hoek');
const Joi = require('joi');

// Declare Internals

const internals = {};

internals.defaults = {
    tokenNames: ['ApplicationToken','UserToken'],
};

internals.schema = Joi.object().keys({
    validateFunc: Joi.func().required(),
    tokenNames: Joi.array().items(Joi.string()).required(),
});

internals.implementation = (server, options) => {

    Hoek.assert(options, 'Missing auth strategy options');

    const settings = Hoek.applyToDefaults(internals.defaults, options);

    Joi.assert(settings, internals.schema);

    const scheme = {
        authenticate: (request, reply) => {

            //console.log(settings.tokenNames);
            let tokens = {};

            for(var index in settings.tokenNames){
              tokens[settings.tokenNames[index]] = request.raw.req.headers[settings.tokenNames[index].toLowerCase()];
            }

            //console.log(tokens);

            if (tokens == {}) {
                return reply(Boom.unauthorized(null, settings.tokenType));
            }

            settings.validateFunc.call(request, tokens, (err, isValid, credentials) => {

                if (err || !isValid) {
                    //console.log(message);
                    return reply(Boom.unauthorized(err));
                }

                // Authenticated
                return reply.continue({credentials: credentials});
            });
        }
    };

    return scheme;
};

exports.register = (server, options, next) => {

    server.auth.scheme('header-access-tokens', internals.implementation);
    next();
};

exports.register.attributes = {
    pkg: require('../package.json')
};
